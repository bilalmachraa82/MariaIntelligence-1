/**
 * Script para testar a prioriza√ß√£o dos servi√ßos de OCR (vers√£o CommonJS)
 */

// Importa√ß√µes necess√°rias
const dotenv = require('dotenv');
dotenv.config();

// Testar prioridade e chaves de servi√ßo
function testServicePriority() {
  console.log("=== TESTE DE PRIORIZA√á√ÉO DE SERVI√áOS AI ===");

  console.log(`üîç Vari√°vel de ambiente PRIMARY_AI: ${process.env.PRIMARY_AI || "n√£o definida (default: auto)"}`);
  
  // Verificar se h√° chaves configuradas
  console.log("\n=== STATUS DAS CHAVES API ===");
  console.log(`OpenRouter API: ${process.env.OPENROUTER_API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
  console.log(`Gemini API: ${process.env.GOOGLE_API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
  console.log(`Hugging Face Token: ${process.env.HF_TOKEN ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
  
  // Recomenda√ß√µes
  console.log("\n=== RECOMENDA√á√ïES ===");
  if (!process.env.OPENROUTER_API_KEY) {
    console.log("‚ö†Ô∏è Para usar Mistral OCR, configure OPENROUTER_API_KEY no arquivo .env");
    console.log('Exemplo: OPENROUTER_API_KEY="sua-chave-aqui"');
  }
  
  if (!process.env.GOOGLE_API_KEY) {
    console.log("‚ö†Ô∏è Para usar Gemini, configure GOOGLE_API_KEY no arquivo .env");
    console.log('Exemplo: GOOGLE_API_KEY="sua-chave-aqui"');
  }
  
  if (!process.env.HF_TOKEN) {
    console.log("‚ö†Ô∏è Para processamento de manuscritos, configure HF_TOKEN no arquivo .env");
    console.log('Exemplo: HF_TOKEN="seu-token-huggingface-aqui"');
  }
  
  // Verificar a ordem de prioridade definida
  console.log("\n=== ORDEM DE PRIORIDADE ===");
  
  if (process.env.PRIMARY_AI) {
    console.log(`Servi√ßo prim√°rio definido: ${process.env.PRIMARY_AI}`);
  } else {
    console.log("Servi√ßo prim√°rio n√£o definido, usando padr√£o: openrouter");
  }
  
  console.log("\nOrdem de fallback para AIServiceType.AUTO:");
  console.log("1. OpenRouter (Mistral OCR) - se OPENROUTER_API_KEY estiver configurada");
  console.log("2. Gemini - se GOOGLE_API_KEY estiver configurada");
  console.log("3. RolmOCR - se HF_TOKEN estiver configurado");
  
  // Qual servi√ßo ser√° usado?
  console.log("\n=== SERVI√áO USADO PARA OCR ===");
  if (process.env.PRIMARY_AI && process.env.PRIMARY_AI.toLowerCase() !== 'auto') {
    // Servi√ßo espec√≠fico configurado
    const serviceName = process.env.PRIMARY_AI.toLowerCase();
    
    if (serviceName === 'openrouter') {
      if (process.env.OPENROUTER_API_KEY) {
        console.log("üöÄ OpenRouter (Mistral OCR) ser√° usado como servi√ßo prim√°rio");
      } else {
        console.log("‚ö†Ô∏è OpenRouter configurado, mas OPENROUTER_API_KEY n√£o est√° definida");
        console.log("   Sistema far√° fallback para Gemini ou RolmOCR");
      }
    } else if (serviceName === 'gemini') {
      if (process.env.GOOGLE_API_KEY) {
        console.log("üöÄ Gemini ser√° usado como servi√ßo prim√°rio");
      } else {
        console.log("‚ö†Ô∏è Gemini configurado, mas GOOGLE_API_KEY n√£o est√° definida");
        console.log("   Sistema far√° fallback para OpenRouter ou RolmOCR");
      }
    } else if (serviceName === 'rolm') {
      if (process.env.HF_TOKEN) {
        console.log("üöÄ RolmOCR ser√° usado como servi√ßo prim√°rio");
      } else {
        console.log("‚ö†Ô∏è RolmOCR configurado, mas HF_TOKEN n√£o est√° definido");
        console.log("   Sistema far√° fallback para OpenRouter ou Gemini");
      }
    }
  } else {
    // Modo AUTO - seguir prioridade padr√£o
    if (process.env.OPENROUTER_API_KEY) {
      console.log("üöÄ OpenRouter (Mistral OCR) ser√° usado como servi√ßo prim√°rio");
    } else if (process.env.GOOGLE_API_KEY) {
      console.log("üöÄ Gemini ser√° usado como servi√ßo prim√°rio");
    } else if (process.env.HF_TOKEN) {
      console.log("üöÄ RolmOCR ser√° usado como servi√ßo prim√°rio");
    } else {
      console.log("‚ö†Ô∏è Nenhuma chave de API configurada. OCR n√£o funcionar√°.");
    }
  }
}

// Executar o teste
testServicePriority();