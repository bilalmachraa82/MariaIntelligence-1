/**
 * Teste detalhado para diagn√≥stico do endpoint de relat√≥rios de propriet√°rio
 * Este script identifica com precis√£o o que est√° causando o erro 500
 */

import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api';

async function testOwnerReport() {
  console.log('üîç Teste detalhado de relat√≥rio por propriet√°rio');
  console.log('=============================================');
  
  try {
    // 1. Obter lista de propriet√°rios
    console.log('1. Obtendo lista de propriet√°rios...');
    const ownersResponse = await axios.get(`${API_BASE_URL}/owners`);
    
    if (!ownersResponse.data || ownersResponse.data.length === 0) {
      console.log('‚ùå Nenhum propriet√°rio encontrado para testar');
      return;
    }
    
    console.log(`‚úÖ Encontrados ${ownersResponse.data.length} propriet√°rios`);
    
    // 2. Para cada propriet√°rio, testar o relat√≥rio
    console.log('\n2. Testando relat√≥rio para cada propriet√°rio:');
    
    for (const owner of ownersResponse.data.slice(0, 3)) { // Limitar aos 3 primeiros para n√£o sobrecarregar
      console.log(`\nTestando propriet√°rio: ${owner.name} (ID: ${owner.id})`);
      
      try {
        // Tentar obter o relat√≥rio b√°sico
        console.log(`- Tentando obter relat√≥rio b√°sico...`);
        const reportResponse = await axios.get(`${API_BASE_URL}/reports/owner/${owner.id}`);
        console.log(`‚úÖ Relat√≥rio b√°sico obtido com sucesso: status ${reportResponse.status}`);
        console.log(`  Dados do relat√≥rio: ${JSON.stringify(reportResponse.data).substring(0, 150)}...`);
        
        // Testes com par√¢metros de data
        console.log(`- Tentando obter relat√≥rio com filtro de data...`);
        const reportWithDateResponse = await axios.get(`${API_BASE_URL}/reports/owner/${owner.id}?month=3&year=2025`);
        console.log(`‚úÖ Relat√≥rio com filtro de data obtido: status ${reportWithDateResponse.status}`);
      } catch (error) {
        console.log(`‚ùå Erro ao obter relat√≥rio: ${error.message}`);
        
        if (error.response) {
          console.log(`  Status: ${error.response.status}`);
          console.log(`  Dados: ${JSON.stringify(error.response.data)}`);
          
          // Verificar se h√° stack trace ou mensagem detalhada
          if (error.response.data && error.response.data.error) {
            console.log(`  Erro detalhado: ${error.response.data.error}`);
            if (error.response.data.stack) {
              console.log(`  Stack: ${error.response.data.stack}`);
            }
          }
        }
      }
    }
    
    // 3. Testar diferentes par√¢metros para um propriet√°rio espec√≠fico
    if (ownersResponse.data.length > 0) {
      const testOwnerId = ownersResponse.data[0].id;
      console.log(`\n3. Testando diferentes par√¢metros para propriet√°rio ID ${testOwnerId}:`);
      
      // Teste sem par√¢metros 
      await testParameterVariation(testOwnerId, {});
      
      // Teste apenas com m√™s
      await testParameterVariation(testOwnerId, { month: 3 });
      
      // Teste apenas com ano
      await testParameterVariation(testOwnerId, { year: 2025 });
      
      // Teste com m√™s e ano
      await testParameterVariation(testOwnerId, { month: 3, year: 2025 });
      
      // Teste com m√™s anterior
      await testParameterVariation(testOwnerId, { month: 2, year: 2025 });
    }
    
  } catch (error) {
    console.error('Erro durante os testes:', error);
  }
}

async function testParameterVariation(ownerId, params) {
  const queryParams = new URLSearchParams();
  Object.entries(params).forEach(([key, value]) => {
    queryParams.append(key, value);
  });
  
  const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
  const url = `${API_BASE_URL}/reports/owner/${ownerId}${queryString}`;
  
  const paramDesc = Object.keys(params).length 
    ? `${Object.entries(params).map(([k, v]) => `${k}=${v}`).join(', ')}` 
    : 'sem par√¢metros';
  
  console.log(`- Testando com ${paramDesc}...`);
  try {
    const response = await axios.get(url);
    console.log(`‚úÖ Sucesso (${response.status}): ${url}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Falha (${error.response?.status || 'desconhecido'}): ${url}`);
    if (error.response?.data) {
      console.log(`  Erro: ${JSON.stringify(error.response.data)}`);
    }
    return false;
  }
}

// Executar o teste
testOwnerReport().catch(console.error);