# 🐞 SPRINT "Debug Final" – Fechar o ciclo PDF → Reserva

> **Meta:** eliminar o erro de upload, remover dependências do Gemini no OCR e alinhar front‑end / back‑end para ficar 100 % funcional.

---

## 0 | Variáveis de Ambiente (já OK)

```dotenv
PRIMARY_AI=openrouter
OR_MODEL=mistral-ocr
OPENROUTER_API_KEY=<tua‑key>
HF_TOKEN=<hf‑token>
```

---

## 1 | Back‑end

### 1.1 Remover rota antiga

`server/routes.ts`

```ts
// 🔥 APAGA ou comenta
// router.post("/api/upload-pdf", ...);

// ✅ Mantém apenas a rota nova
router.post("/api/ocr", upload.single("pdf"), ocrController.postOcr);
```

### 1.2 Compatibilidade opcional

`ocr.controller.ts` – logo antes de devolver:

```ts
return res.json({
  success: true,
  provider,
  reservations,
  boxes,
  missing,
  extractedData: reservations   //  <‑‑ para não partir o front antigo (até trocares)
});
```

### 1.3 Parser sem Gemini

`server/parsers/parseReservations.ts`

```ts
// 1) REMOVE ou comenta a linha:
// const gpt = await parseReservationDataWithGemini(...);
// 2) Mantém apenas regex + RolmOCR quando handwritingScore > 0.4
```

---

## 2 | Base de dados – aliases

`prisma/schema.prisma`

```prisma
model Property {
  id       Int      @id @default(autoincrement())
  name     String
  aliases  String[] @default([])
  // ...
}
```

```bash
npx prisma migrate dev -n add_aliases
```

`server/services/property.service.ts` – implementar função `matchByAlias` (ver versão anterior).

---

## 3 | Front‑end

### 3.1 Hook de upload

`client/src/lib/ocr.ts`

```ts
export async function processFiles(files: File[]) {
  const fd = new FormData();
  files.forEach(f => fd.append("pdf", f));
  const r = await fetch("/api/ocr?provider=auto", { method: "POST", body: fd });
  if (!r.ok) throw new Error("Falha no OCR");
  return r.json();   // → { reservations, boxes, missing }
}
```

### 3.2 Substituir chamada antiga

`client/src/hooks/use-pdf-upload.ts` – usar a função acima; remover referência a `/api/upload-pdf`.

### 3.3 ValidationDrawer (mínimo viável)

`client/src/components/ValidationDrawer.tsx`

```tsx
/* PDF render + rects omitido por brevidade */
<Form>
  {missing.includes("propertyId") && <Select options={properties} ... />}
  {/* outros campos em falta */}
  <Button onClick={() => saveReservation(finalData)}>Guardar</Button>
</Form>
```

---

## 4 | Endpoint de Orçamento (se ainda 404)

`server/controllers/budget.controller.ts`

```ts
export async function estimate(req, res) {
  const { nights, nightlyRate } = req.body;
  const total = nights * nightlyRate;
  const margin = total * 0.1;
  res.json({ total, margin });
}
```

`server/routes.ts`

```ts
router.post("/api/budgets/estimate", budgetController.estimate);
```

---

## 5 | Dashboard – fix datas

`server/services/dashboard.service.ts`

```ts
const toDate = (d:any)=> new Date(d);
const nights = stays.reduce((sum,s)=> sum + (toDate(s.checkOutDate)-toDate(s.checkInDate))/864e5, 0);
```

---

## 6 | Testes mínimos (Jest)

`tests/ocr.spec.ts`

```ts
it("OCR via OpenRouter", async ()=> {
 const res = await request(app).post("/api/ocr").attach("pdf", "tests/Controlo_Aroeira I.pdf");
 expect(res.status).toBe(200);
 expect(res.body.provider).toBe("openrouter");
});
```

---

## 7 | QA Manual

1. Carregar `Controlo_Aroeira I.pdf` → deve aparecer drawer com campos; se faltar propriedade, dropdown visível.
2. Guardar → reserva surge em `/dashboard`.
3. Criar orçamento rápido → `/api/budgets/estimate` devolve 200.
4. Dashboard mensal mostra número > 0 de noites.

---

## 8 | Diretrizes adicionais de qualidade e workflow

*(inspiradas no guia fornecido)*

* **Nada de "fallbacks" silenciosos**: se o OCR falhar, devolve erro 422; não mudes para Gemini.
* **Levanta exceções → não as escondas**. Logs claros ajudam a depurar.
* **Pytest** → converte suites Jest back‑end para `pytest` quando migrares para Python (actualmente Node). Se adicionares testes Python, usa `pytest` + muitos `asserts`.
* **Sem manipular chaves em código**: as libs carregam do env automaticamente.
* **TDD**: sempre que acrescentar funcionalidade (ex.: aliases, orçamento), cria primeiro um teste que falha — depois implementa.
* **Evita complexidade**: prefere functions pequenas, sem duplicação; se um bloco se repetir 3×, cria helper.
* **Lint sempre verde**: não silencies regras; corrige‑as.
* **Git workflow**: branch feature → PR → merge em `develop`; só vai para `main` quando aprovado.
* **Sem editar dados críticos via script** sem aprovação — evita `DELETE` ou truncar tabelas.
* **Quando algo falhar repetidamente, pára e revê a arquitectura** antes de remendar.

---

Quando tudo isto estiver verde, a app está pronta.
