/**
 * Script simples para testar a integra√ß√£o com o Google Gemini
 * Testa a conex√£o b√°sica e a capacidade de gerar texto
 */

async function testGeminiIntegration() {
  try {
    console.log('üß™ Iniciando teste do adaptador de IA com Gemini...');
    
    // Importar o adaptador de IA diretamente
    const { aiService, AIServiceType } = await import('./server/services/ai-adapter.service.js');
    
    // Definir o servi√ßo como Gemini para testes
    try {
      aiService.setService(AIServiceType.GEMINI);
      console.log('‚úÖ Adaptador configurado para usar Gemini');
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel configurar o Gemini:', error.message);
      console.log('‚ÑπÔ∏è Usando o servi√ßo atual:', aiService.getCurrentService());
    }
    
    // Testar a capacidade de an√°lise de texto simples
    const sampleText = `
      Confirma√ß√£o de Reserva - Booking.com
      
      Propriedade: Apartamento Gra√ßa
      H√≥spede: Jo√£o Silva
      Email: joao.silva@email.com
      Check-in: 15-04-2025
      Check-out: 20-04-2025
      N√∫mero de h√≥spedes: 2
      Valor total: 450,00 ‚Ç¨
    `;
    
    console.log('üîç Analisando texto de amostra...');
    const result = await aiService.parseReservationData(sampleText);
    
    console.log('üìä Resultado da an√°lise:');
    console.log(JSON.stringify(result, null, 2));
    
    if (result && result.propertyName) {
      console.log('‚úÖ Adaptador funcionando corretamente com Gemini!');
    } else {
      console.log('‚ö†Ô∏è Resultado inesperado. Verificar implementa√ß√£o do adaptador.');
    }
    
    // Testar processamento de PDF (usando o adaptador)
    console.log('\nüîç Testando processamento de PDF...');
    const fs = require('fs');
    const path = require('path');
    
    // Verificar se temos um PDF de exemplo
    const pdfPath = './Check-in Maria faz.pdf';
    if (fs.existsSync(pdfPath)) {
      try {
        // Carregar o PDF em base64
        const pdfBuffer = fs.readFileSync(pdfPath);
        const pdfBase64 = pdfBuffer.toString('base64');
        
        console.log(`üìÑ PDF carregado (${Math.round(pdfBuffer.length / 1024)} KB)`);
        
        // Extrair texto do PDF
        console.log('üîç Extraindo texto do PDF com Gemini...');
        const extractedText = await aiService.extractTextFromPDF(pdfBase64);
        
        console.log(`üìù Texto extra√≠do (${extractedText.length} caracteres)`);
        console.log(extractedText.substring(0, 200) + '...');
        
        // Analisar o texto extra√≠do
        console.log('üîç Analisando texto extra√≠do para identificar dados de reserva...');
        const extractedData = await aiService.parseReservationData(extractedText);
        
        console.log('üìä Dados extra√≠dos:');
        console.log(JSON.stringify(extractedData, null, 2));
        
        if (extractedData && extractedData.propertyName) {
          console.log('‚úÖ Processamento de PDF com Gemini funcionando corretamente!');
        } else {
          console.log('‚ö†Ô∏è Falha na extra√ß√£o de dados do PDF.');
        }
      } catch (error) {
        console.error('‚ùå Erro ao processar PDF:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Arquivo PDF de exemplo n√£o encontrado:', pdfPath);
    }
    
    console.log('\nüèÅ Teste de integra√ß√£o com Gemini conclu√≠do');
    
  } catch (error) {
    console.error('‚ùå Erro no teste de integra√ß√£o:', error);
  }
}

// Executar o teste
testGeminiIntegration().catch(console.error);