        boxes: boxesData,
        missing: missingFields,
        rawText: extractedText,
        metrics: {
          latencyMs,
          provider,
          textLength: extractedText.length
        }
      });
    } catch (parseError) {
      console.error('Erro ao extrair dados estruturados:', parseError);
      return res.status(500).json({
        success: false,
        error: 'Erro ao extrair dados estruturados',
        rawText: extractedText,
        details: parseError instanceof Error ? parseError.message : 'Erro desconhecido'
      });
    }
  } catch (error) {
    console.error('Erro no processamento OCR:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno no processamento OCR',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
}

/**
 * Processa um arquivo usando um servi√ßo OCR espec√≠fico
 * @param req Requisi√ß√£o Express com par√¢metro service e arquivo via multer
 * @param res Resposta Express
 */
export async function processWithService(req: Request, res: Response) {
  console.log('üìë Iniciando processamento OCR com servi√ßo espec√≠fico...');
  
  try {
    // Validar se recebemos um arquivo
    if (!req.file) {
      return res.status(422).json({
        success: false,
        message: 'Nenhum arquivo enviado'
      });
    }
    
    // Obter o servi√ßo especificado
    const serviceParam = req.params.service?.toLowerCase() as OCRService;
    
    if (!serviceParam) {
      return res.status(400).json({
        success: false,
        message: 'Servi√ßo n√£o especificado'
      });
    }
    
    // Validar se o servi√ßo √© suportado
    const validServices: OCRService[] = ['mistral', 'openrouter', 'rolm', 'native', 'auto'];
    
    if (!validServices.includes(serviceParam)) {
      return res.status(400).json({
        success: false,
        message: `Servi√ßo inv√°lido: ${serviceParam}. Servi√ßos suportados: ${validServices.join(', ')}`
      });
    }
    
    // Obter o service type conforme a enumera√ß√£o AIServiceType
    let serviceType: AIServiceType;
    
    switch (serviceParam) {
      case 'mistral':
      case 'openrouter':
        serviceType = AIServiceType.OPENROUTER;
        break;
      case 'rolm':
        serviceType = AIServiceType.ROLM;
        break;
      case 'native':
        serviceType = AIServiceType.AUTO; // Usamos AUTO para o modo nativo
        break;
      case 'auto':
      default:
        serviceType = AIServiceType.AUTO;
        break;
    }
    
    // Verificar se o servi√ßo est√° dispon√≠vel
    let serviceAvailable = true;
    
    if (serviceParam === 'mistral' || serviceParam === 'openrouter') {
      serviceAvailable = !!process.env.OPENROUTER_API_KEY;
    } else if (serviceParam === 'rolm') {
      serviceAvailable = !!process.env.HF_TOKEN;
    } else if (serviceParam === 'native') {
      serviceAvailable = true; // O modo nativo est√° sempre dispon√≠vel
    }
    
    if (!serviceAvailable && serviceParam !== 'auto') {
      return res.status(400).json({
        success: false,
        message: `Servi√ßo ${serviceParam} n√£o est√° configurado. Verifique se a chave API correspondente foi fornecida.`
      });
    }
    
    // Caminho do arquivo
    const filePath = req.file.path;
    const mimeType = req.file.mimetype;
    
    // Verificar se o arquivo √© uma imagem ou PDF
    let isImage = false;
    
    if (mimeType.startsWith('image/')) {
      isImage = true;
    } else if (mimeType !== 'application/pdf') {
      return res.status(400).json({
        success: false,
        message: `Tipo de arquivo n√£o suportado: ${mimeType}. Apenas PDFs e imagens s√£o permitidos.`
      });
    }
    
    // Carregar arquivo
    let fileData: Buffer | string;
    let base64Data: string;
    
    try {
      fileData = fs.readFileSync(filePath);
      base64Data = isImage 
        ? fileData.toString('base64')
        : fileData.toString('base64');
    } catch (readError) {
      console.error('Erro ao ler arquivo:', readError);
      return res.status(500).json({
        success: false,
        message: 'Erro ao ler arquivo',
        error: readError instanceof Error ? readError.message : 'Erro desconhecido'
      });
    }
    
    // Extrair o texto do arquivo usando o servi√ßo especificado
    console.log(`Processando arquivo usando servi√ßo: ${serviceParam}`);
    
    const startTime = Date.now();
    let extractedText = '';
    let provider = serviceParam;
    
    try {
      let extractedResult = '';
      
      if (isImage) {
        extractedResult = await aiAdapter.extractTextFromImage(base64Data, serviceType);
      } else {
        extractedResult = await aiAdapter.extractTextFromPDF(base64Data, serviceType);
      }
      
      extractedText = extractedResult;
      provider = serviceParam; // Usamos o servi√ßo solicitado como provider
    } catch (extractError) {
      console.error('Erro na extra√ß√£o de dados:', extractError);
      return res.status(500).json({
        success: false,
        message: 'Erro na extra√ß√£o de dados',
        error: extractError instanceof Error ? extractError.message : 'Erro desconhecido'
      });
    }
    
    const latencyMs = Date.now() - startTime;
    
    // Extrair dados estruturados do texto
    try {
      const { reservations, boxes: boxesData, missing: missingFields } = await parseReservationData(extractedText);
      
      // Para cada reserva, tentar encontrar a propriedade correspondente
      for (const reservation of reservations) {
        if (reservation.propertyName) {
          try {
            // Buscar todas as propriedades e fazer matching manual pelo nome
            const properties = await storage.getProperties();
            
            // Normalizar o nome para facilitar a compara√ß√£o
            const normalizedPropertyName = reservation.propertyName.toLowerCase().trim();
            
            // Tentar encontrar uma correspond√™ncia exata ou parcial
            const exactMatch = properties.find(p => 
              p.name.toLowerCase() === normalizedPropertyName
            );
            
            // Se encontrou correspond√™ncia exata, usar essa
            if (exactMatch) {
              reservation.propertyId = exactMatch.id;
              console.log(`‚úÖ Propriedade encontrada exata: ${exactMatch.name} (ID: ${exactMatch.id})`);
            } else {
              // Tentar correspond√™ncia parcial
              const partialMatches = properties.filter(p => 
                normalizedPropertyName.includes(p.name.toLowerCase()) || 
                p.name.toLowerCase().includes(normalizedPropertyName)
              );
              
              if (partialMatches.length > 0) {
                // Usar a primeira correspond√™ncia parcial
                const bestMatch = partialMatches[0];
                reservation.propertyId = bestMatch.id;
                console.log(`‚úÖ Propriedade encontrada parcial: ${bestMatch.name} (ID: ${bestMatch.id})`);
              } else {
                // Se n√£o encontrou correspond√™ncia, adicionar aos campos ausentes
                if (!missingFields.includes('propertyId')) {
                  missingFields.push('propertyId');
                }
                console.log(`‚ö†Ô∏è Propriedade n√£o encontrada: ${reservation.propertyName}`);
              }
            }
          } catch (propertyError) {
            console.error('Erro ao buscar propriedade:', propertyError);
          }
        }
      }
      
      return res.json({
        success: true,
        provider,
        reservations,
        boxes: boxesData,
        missing: missingFields,
        rawText: extractedText,
        metrics: {
          latencyMs,
          provider,
          textLength: extractedText.length,
          service: serviceParam
        }
      });
    } catch (parseError) {
      console.error('Erro ao extrair dados estruturados:', parseError);
      return res.status(500).json({
        success: false,
        error: 'Erro ao extrair dados estruturados',
        rawText: extractedText,
        details: parseError instanceof Error ? parseError.message : 'Erro desconhecido'
      });
    }
  } catch (error) {
    console.error('Erro no processamento OCR espec√≠fico:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno no processamento OCR',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
}

// Exportar os m√©todos do controlador
export default { processOCR, processWithService };