/**
 * Script para testar o adaptador de IA (Mistral ou Gemini)
 * Este teste verifica se o adaptador est√° selecionando corretamente o servi√ßo dispon√≠vel
 * 
 * Execute com: node test-ai-adapter.cjs
 */

// Carregar vari√°veis de ambiente
require('dotenv').config();

// Simular require do adaptador
(async () => {
  try {
    console.log('üß™ Testando o adaptador de IA...');
    
    // Usar import() din√¢mico para carregar o m√≥dulo ES
    const { aiService, AIServiceType } = await import('./server/services/ai-adapter.service.js');
    
    // Verificar qual servi√ßo est√° sendo usado atualmente
    const currentService = aiService.getCurrentService();
    console.log(`‚úÖ Servi√ßo atual: ${currentService}`);
    
    // Testar a capacidade de an√°lise de texto simples
    const sampleText = `
      Confirma√ß√£o de Reserva - Booking.com
      
      Propriedade: Apartamento Gra√ßa
      H√≥spede: Jo√£o Silva
      Email: joao.silva@email.com
      Check-in: 15-04-2025
      Check-out: 20-04-2025
      N√∫mero de h√≥spedes: 2
      Valor total: 450,00 ‚Ç¨
    `;
    
    console.log('üîç Analisando texto de amostra...');
    const result = await aiService.parseReservationData(sampleText);
    
    console.log('üìä Resultado da an√°lise:');
    console.log(JSON.stringify(result, null, 2));
    
    if (result && result.propertyName) {
      console.log('‚úÖ Adaptador funcionando corretamente!');
    } else {
      console.log('‚ö†Ô∏è Resultado inesperado. Verificar implementa√ß√£o do adaptador.');
    }
    
    // Testar altern√¢ncia entre servi√ßos (se ambos dispon√≠veis)
    const hasMistralKey = process.env.MISTRAL_API_KEY !== undefined && process.env.MISTRAL_API_KEY !== '';
    const hasGeminiKey = process.env.GOOGLE_API_KEY !== undefined && process.env.GOOGLE_API_KEY !== '';
    
    if (hasMistralKey && hasGeminiKey) {
      console.log('üîÑ Ambas as chaves de API est√£o dispon√≠veis. Testando altern√¢ncia entre servi√ßos...');
      
      // For√ßar uso do Mistral
      aiService.setService(AIServiceType.MISTRAL);
      console.log(`‚úÖ Servi√ßo alterado para: ${aiService.getCurrentService()}`);
      
      // For√ßar uso do Gemini
      aiService.setService(AIServiceType.GEMINI);
      console.log(`‚úÖ Servi√ßo alterado para: ${aiService.getCurrentService()}`);
      
      // Voltar para auto-detec√ß√£o
      aiService.setService(AIServiceType.AUTO);
      console.log(`‚úÖ Servi√ßo voltou para auto-detec√ß√£o: ${aiService.getCurrentService()}`);
    } else {
      if (hasMistralKey) {
        console.log('‚ÑπÔ∏è Apenas a chave do Mistral est√° dispon√≠vel.');
      } else if (hasGeminiKey) {
        console.log('‚ÑπÔ∏è Apenas a chave do Gemini est√° dispon√≠vel.');
      } else {
        console.log('‚ö†Ô∏è Nenhuma chave de API configurada. O adaptador est√° usando mocks.');
      }
    }
    
    console.log('üèÅ Teste conclu√≠do');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar o adaptador:', error);
  }
})();