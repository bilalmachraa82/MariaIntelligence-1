#!/bin/bash\n\n# Performance-Optimized Deployment Script for MariaIntelligence\n# Hostinger VPS deployment with full performance stack\n\nset -e\n\necho \"🚀 Starting performance-optimized deployment for MariaIntelligence...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_step() {\n    echo -e \"${BLUE}[STEP]${NC} $1\"\n}\n\n# Check if running on correct environment\nif [[ ! -f \"package.json\" || ! -f \"config/performance.config.js\" ]]; then\n    print_error \"This script must be run from the MariaIntelligence root directory\"\n    exit 1\nfi\n\n# Step 1: Setup Redis\nprint_step \"1. Setting up Redis for caching and sessions\"\nif command -v redis-server &> /dev/null; then\n    print_status \"Redis already installed\"\nelse\n    print_status \"Installing Redis...\"\n    ./scripts/setup-redis.sh\nfi\n\n# Test Redis connection\nprint_status \"Testing Redis connection...\"\nnode scripts/test-redis-connection.js || {\n    print_error \"Redis connection test failed\"\n    exit 1\n}\n\n# Step 2: Database Optimization\nprint_step \"2. Optimizing database performance\"\nprint_status \"Applying database optimization scripts...\"\nif [[ -n \"$DATABASE_URL\" ]]; then\n    # Apply database optimizations (PostgreSQL/Neon)\n    if command -v psql &> /dev/null; then\n        psql \"$DATABASE_URL\" -f scripts/database-optimization.sql\n    else\n        print_warning \"psql not available, skipping database optimizations\"\n        print_warning \"Manually run: psql \\$DATABASE_URL -f scripts/database-optimization.sql\"\n    fi\nelse\n    print_warning \"DATABASE_URL not set, skipping database optimizations\"\nfi\n\n# Step 3: Install Performance Dependencies\nprint_step \"3. Installing performance dependencies\"\nnpm install --production\nprint_status \"Dependencies installed\"\n\n# Step 4: Build Application\nprint_step \"4. Building application for production\"\nexport NODE_ENV=production\nnpm run build\nprint_status \"Application built successfully\"\n\n# Step 5: CDN Asset Optimization\nprint_step \"5. Optimizing assets for CDN\"\nnode scripts/cdn-optimization.js\nprint_status \"Assets optimized for CDN delivery\"\n\n# Step 6: Setup PM2 for Clustering\nprint_step \"6. Setting up PM2 cluster mode\"\nif ! command -v pm2 &> /dev/null; then\n    print_status \"Installing PM2 globally...\"\n    npm install -g pm2\nfi\n\n# Stop existing PM2 processes\npm2 delete all 2>/dev/null || true\n\n# Start with PM2 configuration\npm2 start config/pm2.config.js --env production\npm2 save\nprint_status \"PM2 cluster started with configuration\"\n\n# Step 7: Setup System Service (Optional)\nif [[ \"$1\" == \"--install-service\" ]]; then\n    print_step \"7. Installing as system service\"\n    pm2 startup\n    print_status \"PM2 startup script generated. Follow the instructions above.\"\nfi\n\n# Step 8: Performance Monitoring Setup\nprint_step \"8. Setting up performance monitoring\"\n\n# Create systemd service for performance monitoring (Linux only)\nif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n    sudo tee /etc/systemd/system/mariaintelligence-monitor.service > /dev/null << 'EOF'\n[Unit]\nDescription=MariaIntelligence Performance Monitor\nAfter=network.target redis-mariaintelligence.service\n\n[Service]\nType=simple\nUser=deploy\nWorkingDirectory=/var/www/mariaintelligence\nExecStart=/usr/bin/node scripts/performance-monitor.js\nRestart=always\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironment=MONITOR_INTERVAL=30000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    sudo systemctl daemon-reload\n    sudo systemctl enable mariaintelligence-monitor\n    sudo systemctl start mariaintelligence-monitor\n    print_status \"Performance monitoring service installed\"\nfi\n\n# Step 9: Configure Reverse Proxy (Nginx/OpenLiteSpeed)\nprint_step \"9. Configuring reverse proxy\"\n\nif command -v nginx &> /dev/null; then\n    print_status \"Nginx detected - generating configuration...\"\n    cat > /tmp/mariaintelligence-nginx.conf << 'EOF'\nupstream mariaintelligence {\n    least_conn;\n    server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3003 max_fails=3 fail_timeout=30s;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name your-domain.com;\n    \n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name your-domain.com;\n    \n    # SSL Configuration\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    \n    # Performance optimizations\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;\n    \n    # Security headers\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"origin-when-cross-origin\" always;\n    \n    # Static assets with long cache\n    location /assets/ {\n        alias /var/www/mariaintelligence/client/dist/assets/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # API routes\n    location /api/ {\n        proxy_pass http://mariaintelligence;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n    \n    # Health check\n    location /api/health {\n        proxy_pass http://mariaintelligence;\n        access_log off;\n    }\n    \n    # Main application\n    location / {\n        proxy_pass http://mariaintelligence;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\nEOF\n    print_status \"Nginx configuration generated at /tmp/mariaintelligence-nginx.conf\"\n    print_warning \"Copy this configuration to your nginx sites-available directory\"\nelif [[ -f \"config/openlitespeed.config\" ]]; then\n    print_status \"OpenLiteSpeed configuration available at config/openlitespeed.config\"\n    print_warning \"Configure OpenLiteSpeed with the provided configuration\"\nfi\n\n# Step 10: Final Health Checks\nprint_step \"10. Running health checks\"\n\n# Wait for services to start\nsleep 5\n\n# Check PM2 status\nif pm2 status | grep -q \"online\"; then\n    print_status \"PM2 processes are running\"\nelse\n    print_error \"PM2 processes not running properly\"\n    pm2 logs --lines 20\nfi\n\n# Check Redis\nif redis-cli ping | grep -q \"PONG\"; then\n    print_status \"Redis is responding\"\nelse\n    print_warning \"Redis may not be running properly\"\nfi\n\n# Check application health\nprint_status \"Testing application health...\"\nsleep 2\nif curl -f http://localhost:3001/api/health >/dev/null 2>&1; then\n    print_status \"Application health check passed\"\nelse\n    print_warning \"Application health check failed - check logs\"\nfi\n\n# Step 11: Performance Verification\nprint_step \"11. Performance verification\"\n\n# Run performance benchmark\nnode -e \"\nconst http = require('http');\nconst start = Date.now();\nhttp.get('http://localhost:3001/api/health', (res) => {\n  const responseTime = Date.now() - start;\n  console.log(\\`Response time: \\${responseTime}ms\\`);\n  if (responseTime < 500) {\n    console.log('✅ Response time target met (<500ms)');\n  } else {\n    console.log('⚠️  Response time above target (>500ms)');\n  }\n});\"\n\n# Display deployment summary\nprint_step \"Deployment Summary\"\necho \"\"\necho \"🎉 Performance-optimized deployment completed!\"\necho \"\"\necho \"📊 Performance Features Deployed:\"\necho \"  ✅ Redis caching and session storage\"\necho \"  ✅ PM2 cluster mode with auto-restart\"\necho \"  ✅ Database query optimization\"\necho \"  ✅ CDN-optimized assets\"\necho \"  ✅ Performance monitoring\"\necho \"  ✅ Compression and caching headers\"\necho \"  ✅ Security hardening\"\necho \"\"\necho \"🔧 Management Commands:\"\necho \"  📊 Check status: pm2 status\"\necho \"  📊 View logs: pm2 logs\"\necho \"  📊 Restart: pm2 restart all\"\necho \"  📊 Performance monitor: node scripts/performance-monitor.js\"\necho \"  📊 Redis monitor: node scripts/monitor-redis.js\"\necho \"\"\necho \"🌐 Application URLs:\"\necho \"  📱 Application: http://localhost:3001\"\necho \"  📊 Health: http://localhost:3001/api/health\"\necho \"  📊 Performance: http://localhost:3001/api/performance/stats\"\necho \"\"\necho \"⚡ Performance Targets:\"\necho \"  📄 Page load: <3s\"\necho \"  🔌 API response: <500ms\"\necho \"  📄 PDF processing: <5s\"\necho \"  💬 Chat response: <2s\"\necho \"\"\necho \"📝 Next Steps:\"\necho \"  1. Configure your domain in reverse proxy\"\necho \"  2. Set up SSL certificates\"\necho \"  3. Configure CDN if using external provider\"\necho \"  4. Set up monitoring alerts\"\necho \"  5. Configure database connection pooling\"\necho \"\"\nprint_status \"Deployment completed successfully! 🚀\"\n"